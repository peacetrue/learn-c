/*
MFENCE 指令对于在该指令前发出的所有从内存加载和存储到内存的指令执行序列化操作。
这种序列化操作确保了在 MFENCE 指令之前以程序顺序排列的每个内存加载和存储指令在 MFENCE 指令之后的任何加载或存储指令之前变得全局可见。
MFENCE 指令与所有加载和存储指令，其他 MFENCE 指令，任何 LFENCE 和 SFENCE 指令以及任何序列化指令（如 CPUID 指令）相关。MFENCE 指令不会序列化指令流。

弱排序内存类型可以通过一些技术（如乱序发射、预测读取、写组合和写折叠）来实现更高的处理器性能。数据消费者识别或知道数据是弱排序的程度在各种应用程序中不同，并且可能对生产此数据的系统不可知。 MFENCE 指令提供了一种性能高效的方式，可以确保产生弱排序结果的例程与使用该数据的例程之间的加载和存储排序。

处理器可以自由地从使用 WB、WC 和 WT 存储类型的系统内存区域中推测地提取和缓存数据。这种推测性提取可以随时发生，并且不与指令执行相关。因此，它与 MFENCE 指令的执行不相关；数据可以在执行 MFENCE 指令之前、期间或之后被推测性地带入缓存中。

该指令在非64位模式和64位模式下的操作相同。指令上面的操作码规定了ModR/M字节为F0。对于该指令，处理器忽略ModR/M字节的r/m字段。因此，MFENCE 由任何形如0F AE Fx的操作码编码，其中x在0-7范围内。
 */
int main() {
    asm volatile("mfence" ::: "memory");
}
